/*
题目描述
输入两个整数序列，第一个序列表示栈的压入顺序，
请判断第二个序列是否可能为该栈的弹出顺序。
假设压入栈的所有数字均不相等。
例如序列1,2,3,4,5是某栈的压入顺序，
序列4,5,3,2,1是该压栈序列对应的一个弹出序列，
但4,3,5,1,2就不可能是该压栈序列的弹出序列。
（注意：这两个序列的长度是相等的）
*/

/*
解题思路：
借用一个辅助栈
将压入栈的序列依次压入栈里，在这个过程里让其与弹出序列相比较
如果相同则出栈，并且弹出序列向后移动
直到栈里没有元素，则说明压入顺序与弹出顺寻对应
*/

class Solution {
public:
	bool IsPopOrder(vector<int> pushV, vector<int> popV) {
		stack<int>st;
		int pushIdx = 0;
		int popIdx = 0;
		int sz = pushV.size();
		while (pushIdx < sz)
		{
			st.push(pushV[pushIdx++]);
			while (!st.empty() && st.top() == popV[popIdx]) {
				st.pop();
				++popIdx;
			}
		}
		return st.empty();
	}
};